type = "l",
x = index(var_predict)
)
plot(
var_predict,
type = "l",
)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
ylab = ""
)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
ylab = "Desvio Padrão"
)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
ylab = "Volatilidade (sd)"
)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
ylab = "Volatilidade (sd)",
main = "Volatilidade condicional (sd): efetiva e esperada"
)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
ylab = "Volatilidade (sd)",
main = "Volatilidade condicional (sd): forecast"
)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
ylab = "Volatilidade (sd)",
main = "Volatilidade condicional (sd): forecasting"
)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
ylab = "Volatilidade (sd)",
main = "Volatilidade condicional (sd): forecasting"
)
garch_predict_xts <- xts(
garch_predict$standardDeviation,
order.by = seq(as.Date("2023-09-02"), by = "days", length.out = 252))
var_s1 <- rollapply(dif_log_close, width = 2, FUN = sd, fill = NA)[-1]
var_predict <- rbind(var_s1, garch_predict_xts)
plot(
ts(var_predict),
type = "l",
x = index(var_predict),
xlab = "Horizonte",
ylab = "Volatilidade (sd)",
main = "Volatilidade condicional (sd): forecasting"
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tibble)
library(tidyr)
library(readr)
library(readxl)
library(sidrar)
library(ggplot2)
library(quantmod)
library(lubridate)
library(forecast)
library(plm)
library(stats)
library(broom)
library(stargazer)
library(knitr)
library(kableExtra)
port <- read_xlsx(
"Avg_Val_Weight_Ret_25port1.xlsx",
) %>%
mutate(
month = as_date(month)
)
fac <- read_xlsx(
"F-F_Research_Data_Factors1.xlsx"
) %>%
mutate(
month = as_date(month)
)
FF <- full_join(
fac, port,
by = "month"
)
remove(fac, port)
FF_long <- FF %>%
pivot_longer(
!1:5,
names_to = "i",
values_to = "R"
) %>%
mutate(
Mkt = as.numeric(Mkt),
SMB = as.numeric(SMB),
HML = as.numeric(HML),
RF = as.numeric(RF)
)
FF_long <- FF_long %>%
mutate(
Re = R - RF
)
painel_R <- pvcm(
R ~ Mkt + SMB + HML,
data = FF_long,
model = "within",
index = c("i", "month")
)
betas_R <- coef(painel_R) %>%
rownames_to_column(var = "i") %>%
rename(
a = "(Intercept)",
b_Mkt = Mkt,
b_SMB = SMB,
b_HML = HML
)
painel_Re <- pvcm(
Re ~ Mkt + SMB + HML,
data = FF_long,
model = "within",
index = c("i", "month")
)
betas_Re <- coef(painel_Re) %>%
rownames_to_column(var = "i") %>%
rename(
a = "(Intercept)",
b_Mkt = Mkt,
b_SMB = SMB,
b_HML = HML
)
betas <- inner_join(
betas_R,
betas_Re,
by = "i"
)
kable(
betas,
linesep = "\\addlinespace",
booktabs = TRUE,
col.names = c(
"Portfólios           ",
"a       ",
"$\\beta_{Mkt}$",
"$\\beta_{SMB}$",
"$\\beta_{HML}$",
"a       ",
"$\\beta_{Mkt}$",
"$\\beta_{SMB}$",
"$\\beta_{HML}$"
),
digits = 3,
escape = FALSE
) %>%
add_header_above(
c(" " = 1, "Retornos Brutos" = 4, "Excesso de retornos" = 4)
)
FF_expected <- FF_long %>%
select(
i,R,Re
) %>%
group_by(i) %>%
summarise(
ER = mean(R),
ERe = mean(Re)
)
FF_ER <- FF_expected %>%
full_join(
betas_R,
by = "i"
)
FF_ERe <- FF_expected %>%
full_join(
betas_Re,
by = "i"
)
cross_ER <- lm(
ER ~ b_Mkt + b_SMB + b_HML,
data = FF_ER
)
cross_ERe <- lm(
ERe ~ b_Mkt + b_SMB + b_HML,
data = FF_ER
)
stargazer(cross_ER, cross_ERe,
dep.var.labels = c(
"Expected Return",
"Expected Excess Return"
),
covariate.labels=c(
"$\\lambda_{Mkt}$",
"$\\lambda_{SMB}$",
"$\\lambda_{HML}$"
),
header=FALSE,
float = FALSE)
View(FF_ER)
cross_ERe <- lm(
ERe ~ b_Mkt + b_SMB + b_HML,
data = FF_ERe
)
stargazer(cross_ER, cross_ERe,
dep.var.labels = c(
"Expected Return",
"Expected Excess Return"
),
covariate.labels=c(
"$\\lambda_{Mkt}$",
"$\\lambda_{SMB}$",
"$\\lambda_{HML}$"
),
header=FALSE,
float = FALSE)
cross_ERe <- lm(
ERe ~ b_Mkt + b_SMB + b_HML,
data = FF_ERe
)
cross_ER <- lm(
ER ~ b_Mkt + b_SMB + b_HML,
data = FF_ER
)
stargazer(cross_ER, cross_ERe,
dep.var.labels = c(
"Expected Return",
"Expected Excess Return"
),
covariate.labels=c(
"$\\lambda_{Mkt}$",
"$\\lambda_{SMB}$",
"$\\lambda_{HML}$"
),
header=FALSE,
float = FALSE)
FF_ER %>%
ggplot() +
aes(x=b_Mkt, y=ER) +
geom_point()
FF_ER %>%
ggplot() +
aes(x=b_Mkt, y=ERe) +
geom_point()
FF_ER %>%
ggplot() +
aes(x=b_Mkt, y=ER) +
geom_point()
FF_ER %>%
ggplot() +
aes(x=b_SMB, y=ER) +
geom_point()
FF_ER %>%
ggplot() +
aes(x=b_HML, y=ER) +
geom_point()
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = beta,
values_to = value
)
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=b_HML, y=ER) +
geom_point()
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap("beta")
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap("beta", dir = "v" )
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap(
"beta",
dir = "v",
shrink = FALSE)
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap(
"beta",
dir = "v",
scales = "free_x"
)
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap(
"beta",
dir = "v",
scales = "free_x"
labeller = c("beta","beta_","beta__")
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap(
"beta",
dir = "v",
scales = "free_x",
labeller = c("beta","beta_","beta_")
)
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap(
"beta",
dir = "v",
scales = "free_x"
)
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap(
"beta",
dir = "h",
scales = "free_x"
)
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
facet_wrap(
"beta",
scales = "free_x"
) %>%
geom_smooth()
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
geom_smooth() +
facet_wrap(
"beta",
scales = "free_x"
)
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(
"beta",
scales = "free_x"
)
stargazer(cross_ER, cross_ERe,
dep.var.labels = c(
"Expected Return",
"Expected Excess Return"
),
covariate.labels=c(
"$\\lambda_{Mkt}$",
"$\\lambda_{SMB}$",
"$\\lambda_{HML}$"
),
header=FALSE,
float = FALSE)
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(
"beta",
scales = "free_x"
) +
theme_minimal()
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "beta",
values_to = "value"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(
"beta",
scales = "free_x"
) +
theme_minimal()
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "names",
values_to = "Betas"
) %>%
ggplot() +
aes(x=value, y=ER) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(
"names",
scales = "free_x"
) +
theme_minimal()
FF_ER %>%
pivot_longer(
cols = c("b_Mkt","b_SMB","b_HML"),
names_to = "names",
values_to = "Betas"
) %>%
ggplot() +
aes(x=Betas, y=ER) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(
"names",
scales = "free_x"
) +
theme_minimal()
